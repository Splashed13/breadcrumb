#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from nav_msgs.msg import OccupancyGrid
import sys
import cv2
import numpy as np

import rclpy.qos
import rclpy.time

from builtin_interfaces.msg import Time as TimeStamp
def time_zero():
    return rclpy.time.Time.from_msg(TimeStamp())

class Dilate(Node):
    def __init__(self) -> None:
        super().__init__('dilate') # type: ignore

        self._dilation_size = 3
        self._threshold = 50

        self._morph_element = cv2.getStructuringElement(
            cv2.MORPH_DILATE,
            (2*self._dilation_size + 1, 2*self._dilation_size + 1),
            (self._dilation_size, self._dilation_size)
        )

        latching_qos = rclpy.qos.QoSProfile(
            history=rclpy.qos.QoSHistoryPolicy.KEEP_LAST,
            depth=10,
            durability=rclpy.qos.DurabilityPolicy.TRANSIENT_LOCAL,
        )
        
        self._sub_grid = self.create_subscription(OccupancyGrid, "~/sensed", self._cb_grid, 10)
        self._pub_grid = self.create_publisher(OccupancyGrid, 'grid', latching_qos)
        self.get_logger().info("Started grid dilator")


    def _cb_grid(self, msg:OccupancyGrid):
        if rclpy.time.Time.from_msg(msg.header.stamp) <= time_zero():
            return

        data = np.array(msg.data, dtype=np.int8).astype(np.int16)
        grid = cv2.Mat(data).reshape(msg.info.height, msg.info.width)

        _, obstacles = cv2.threshold(grid, self._threshold, 100, cv2.THRESH_BINARY)
        # _, unknowns = cv2.threshold(grid, -1, 1, cv2.THRESH_BINARY_INV)

        dilatation_dst = cv2.dilate(obstacles, self._morph_element)
        dilatation_dst[grid < 0] = -1

        # cv2.imshow('grid', grid*1000)
        # cv2.imshow('obstacles', obstacles.astype(np.int8))
        # cv2.imshow('unknowns', grid[grid < 0].astype(np.int8)*100)
        # cv2.imshow('dilatation_dst', dilatation_dst.astype(np.int8)*1000)

        msg_d = msg
        msg_d.data = dilatation_dst.astype(np.int8).ravel()

        # Send resulting grid
        self._pub_grid.publish(msg_d)


def main(args:list[str]):
    rclpy.init(args=args)

    d = Dilate()
    rclpy.spin(d)

    return


if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except KeyboardInterrupt:
        pass

    # cv2.destroyAllWindows()